{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","_useState","useState","color","backgroundColor","_useState2","Object","slicedToArray","myStyle","setMyStyle","_useState3","_useState4","btnText","setBtnText","react_default","a","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","border","Alert","props","alert","concat","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","react_router_dom","to","title","aria-label","aria-current","aboutText","toggleMode","htmlFor","TextForm","text","setText","Fragment","heading","value","onChange","event","target","rows","newtext","showAlert","console","log","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","join","filter","y","length","lenght","defaultProps","App","setMode","setAlert","message","setTimeout","body","react_router","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.97d5d0d6.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nexport default function About() {\nconst [myStyle,setMyStyle] = useState({\n    color: \"black\",\n    backgroundColor: \"white\",\n  });\n\nconst[btnText, setBtnText] = useState(\"Enable Dark Mode\") \n\n let toggleStyle = ()=>{\n     if(myStyle.color === 'white' ){\n         setMyStyle({\n             color: 'black',\n             backgroundColor: 'white'\n         })\n         setBtnText(\"Enable Dark Mode\");\n     }\n     else{\n        setMyStyle({\n            color: 'white',\n            backgroundColor: 'black',\n            border: '1px solid white'\n        })\n        setBtnText(\"Enable Light Mode\");\n     }\n  }\n\n  return (\n    <div className=\"container\" style={myStyle}>\n      <h1 className=\"my-3\">About Us</h1>\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingOne\">\n            <button\n              className=\"accordion-button\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseOne\"\n              aria-expanded=\"true\"\n              aria-controls=\"collapseOne\"\n              style={myStyle}\n            >\n              Accordion Item #1\n            </button>\n          </h2>\n          <div\n            id=\"collapseOne\"\n            className=\"accordion-collapse collapse show\"\n            aria-labelledby=\"headingOne\"\n            data-bs-parent=\"#accordionExample\" style={myStyle}\n          >\n            <div className=\"accordion-body\">\n              <strong>This is the first item's accordion body.</strong> It is\n              shown by default, until the collapse plugin adds the appropriate\n              classNamees that we use to style each element. These classNamees\n              control the overall appearance, as well as the showing and hiding\n              via CSS transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\n            <button\n              className=\"accordion-button collapsed\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseTwo\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseTwo\"\n              style={myStyle}\n            >\n              Accordion Item #2\n            </button>\n          </h2>\n          <div\n            id=\"collapseTwo\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingTwo\"\n            data-bs-parent=\"#accordionExample\"\n            style={myStyle}\n          >\n            <div className=\"accordion-body\">\n              <strong>This is the second item's accordion body.</strong> It is\n              hidden by default, until the collapse plugin adds the appropriate\n              classNamees that we use to style each element. These classNamees\n              control the overall appearance, as well as the showing and hiding\n              via CSS transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingThree\">\n            <button\n              className=\"accordion-button collapsed\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseThree\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseThree\"\n              style={myStyle}\n            >\n              Accordion Item #3\n            </button>\n          </h2>\n          <div\n            id=\"collapseThree\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingThree\"\n            data-bs-parent=\"#accordionExample\"\n            style={myStyle}\n          >\n            <div className=\"accordion-body\">\n              <strong>This is the third item's accordion body.</strong> It is\n              hidden by default, until the collapse plugin adds the appropriate\n              classNamees that we use to style each element. These classNamees\n              control the overall appearance, as well as the showing and hiding\n              via CSS transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"container my-3\">\n        <button type=\"button\" onClick={toggleStyle} className=\"btn btn-warning\">{btnText}</button>\n      </div>\n    </div>\n  );\n}\n","import React from 'react'\n\nexport default function Alert(props) {\n  const capitalize = (word)=>{\n    const lower = word.toLowerCase();\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\n  }\n  return (\n    \n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n       <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n    </div>\n  \n  )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom';\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n                        </li>\n                    </ul>\n                    {/* <form className=\"d-flex\">\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                        <button cla\n                        ssName=\"btn btn-primary\" type=\"submit\">Search</button>\n                    </form> */}\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    title: 'Set title here',\n    aboutText: 'About'\n  };","import React, { useState } from 'react'\n\nexport default function TextForm(props){\n    \n    const handleUpClick = ()=>{\n        //console.log(\"Uppercase clicked\" + text);\n        let newtext = text.toUpperCase();\n        setText(newtext);\n        props.showAlert(\"Converted to UpperCase\",\"success\");\n    }\n\n    const handleDownClick = ()=>{\n        //console.log(\"Uppercase clicked\" + text);\n        let newtext = text.toLowerCase();\n        setText(newtext);\n        props.showAlert(\"Converted to LowerCase\",\"success\");\n    }\n\n    // const convertToTitlecase = () => {\n    //     setText(text[0].toUpperCase() + text.substring(1).toLowerCase());\n    // }\n\n    const handleCopy = () => {\n        console.log(\"I am copy\");\n        var text = document.getElementById('mybox');\n        console.log(text);\n\n        text.select();\n        text.setSelectionRange(0, 9999);\n        navigator.clipboard.writeText(text.value);\n       props.showAlert(\"copied to Clipboard\",\"success\");\n    }\n\n    const handleExtraSpaces = () => {\n        let newtext = text.split(/[  ]+/);\n        setText(newtext.join(\" \"));\n        props.showAlert(\"Extra Spaces Removed\",\"success\");\n    }\n\n    const handleClearClick = ()=>{\n        //console.log(\"Uppercase clicked\" + text);\n        let newtext = '';\n        setText(newtext);\n        props.showAlert(\"Text Cleared\",\"success\");\n    }\n\n    const handleOnChnage = (event)=>{\n        //console.log(\"On Change\");\n        setText(event.target.value);\n    }\n\n    const [text, setText] = useState('');\n\n    return (\n        <>\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\n            <h1>{props.heading}</h1>\n            <div className=\"mb-3\">\n            <label htmlFor=\"mybox\" className=\"form-label\"></label>\n            <textarea className=\"form-control\" value={text} style={{backgroundColor: props.mode==='light'?'white':'grey', color: props.mode==='dark'?'white':'#042743'}} onChange={handleOnChnage} id=\"mybox\" rows=\"8\"></textarea>\n            </div>\n            <button className=\"btn btn-info m-1\" onClick={handleUpClick}>Convert To Uppercase</button>\n            <button className=\"btn btn-info m-1\" onClick={handleDownClick}>Convert To Lowercase</button>\n            {/* <button className=\"btn btn-info m-1\" onClick={convertToTitlecase}>Convert To Camelcase</button> */}\n            <button className=\"btn btn-info m-1\" onClick={handleCopy}>Copy Text</button>\n            <button className=\"btn btn-info m-1\" onClick={handleExtraSpaces}>Remove EXTRAspace</button>\n            <button className=\"btn btn-info m-1\" onClick={handleClearClick}>Clear Text</button>\n        </div>\n        <div className=\"container my-3\" style={{color: props.mode==='light'?'#042743':'white'}}>\n            <h1>Your Text Summery</h1>\n            <p>{text.split(\" \").filter((y) => (y!=\"\")).length} words and {text.length} characters</p>\n            <p>{0.008 * text.split(\" \").length} Minutes to read</p>\n            <h2>Preview</h2>\n            <p>{text.lenght>0?text:\"Enter Somthing in the above textbox to preview it here\"}</p>\n        </div>\n        </>\n    )\n}\n","//import logo from './logo.svg';\nimport { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm'\n//import TextForm from './components/TextForm';\nimport React from 'react'\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n const [mode, setMode] = useState('light');\n const[alert,setAlert] = useState(null);\n\n const showAlert = (message, type)=>{\n   setAlert({\n     msg: message,\n     type:type\n   })\n  setTimeout(() => {\n    setAlert(null);\n  }, 1500);\n }\n const toggleMode = ()=>{\n   if(mode == 'light'){\n     setMode('dark');\n     document.body.style.backgroundColor='rgb(10, 37, 69)';\n     showAlert(\"Dark mode has been enabled\", \"success\");\n   document.title = \"TextUtils - DarkMode\";\n   }\n   else{\n     setMode('light');\n     document.body.style.backgroundColor='white';\n     showAlert(\"Light mode has been enabled\", \"success\");\n   document.title = \"TextUtils - LightMode\";\n   }\n }\n  return (\n    <>\n    <Router>\n     <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n     <Alert alert={alert}/>\n     <div className=\"container my-3\">\n       <Routes>\n          <Route exact path=\"/about\" element={<About/>}></Route>\n          <Route exact path='/' element={<TextForm showAlert={showAlert} heading=\"Entre The Text To Analyze Below\" mode={mode}/>}></Route>\n          </Routes>  \n      </div>\n    </Router>\n    </>   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}